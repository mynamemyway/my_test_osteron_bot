import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from mistralai import Mistral

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_BOT_TOKEN or not MISTRAL_API_KEY:
    raise ValueError(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ MISTRAL_API_KEY –≤ —Ñ–∞–π–ª–µ .env"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ Mistral AI
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
mistral_client = Mistral(api_key=MISTRAL_API_KEY)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å)
user_styles = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–∏–ª—è–º–∏
def gen_style_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(
        InlineKeyboardButton("üßë‚Äçüî¨ –õ–æ–≥–∏—á–Ω—ã–π –∏ –Ω–∞—É—á–Ω—ã–π", callback_data="style_logical"),
        InlineKeyboardButton("üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ —è—Ä–∫–∏–π", callback_data="style_creative"),
        InlineKeyboardButton("ü§ù –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", callback_data="style_balanced"),
    )
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é.\n\n"
        "–Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É —Ä–µ–≥—É–ª—è—Ü–∏–∏ –≥–æ—Ä–º–æ–Ω–æ–≤. "
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞."
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=gen_style_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("style_"))
def callback_query(call):
    style_code = call.data.split("_")[1]
    user_id = call.from_user.id
    user_styles[user_id] = style_code

    style_map = {
        "logical": "üßë‚Äçüî¨ –õ–æ–≥–∏—á–Ω—ã–π –∏ –Ω–∞—É—á–Ω—ã–π",
        "creative": "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ —è—Ä–∫–∏–π",
        "balanced": "ü§ù –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
    }
    selected_style_text = style_map.get(style_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å")

    bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å: {selected_style_text}")
    bot.send_message(
        call.message.chat.id,
        f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: *{selected_style_text}*.\n\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '–õ—É—á—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω–∞' –∏–ª–∏ '–í–ª–∏—è–Ω–∏–µ —Å–Ω–∞ –Ω–∞ –≥–æ—Ä–º–æ–Ω—ã'.",
        parse_mode="Markdown",
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
@bot.message_handler(func=lambda message: True)
def generate_post(message):
    user_id = message.from_user.id

    if user_id not in user_styles:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
        )
        return

    topic = message.text
    style_code = user_styles.pop(
        user_id
    )  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    style_description_map = {
        "logical": "—Å—Ç—Ä–æ–≥–æ –Ω–∞—É—á–Ω—ã–π, —Å —Ñ–∞–∫—Ç–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –±–µ–∑ '–≤–æ–¥—ã'.",
        "creative": "—è—Ä–∫–∏–π, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω—ã–π, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∞–ª–æ–≥–∏–π –∏ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–∞. –¶–µ–ª—å - –≤–æ–≤–ª–µ—á—å –∏ –∑–∞–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è.",
        "balanced": "—Å–æ—á–µ—Ç–∞—é—â–∏–π —Ñ–∞–∫—Ç—ã –∏ –ª–µ–≥–∫—É—é –ø–æ–¥–∞—á—É. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–Ω—è—Ç–Ω—ã–π —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.",
    }
    style_description = style_description_map.get(style_code, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π")

    bot.send_message(
        message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã."
    )

    try:
        prompt = (
            f"–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º—É–∂—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. "
            f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É: '{topic}'. "
            f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å –ø–æ—Å—Ç–∞ - —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥–æ—Ä–º–æ–Ω–æ–≤ –¥–ª—è –º—É–∂—á–∏–Ω. "
            f"–°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: {style_description}. "
            f"–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è. "
            f"–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é."
        )

        messages = [{"role": "user", "content": prompt}]
        chat_response = mistral_client.chat.complete(
            model="mistral-large-latest", messages=messages
        )
        generated_text = chat_response.choices[0].message.content
        bot.send_message(message.chat.id, generated_text)
        bot.send_message(
            message.chat.id, "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç? –ù–∞–∂–º–∏—Ç–µ /start"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral AI: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
        )


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
